Procedure for developing a data abstraction:

1. Defining the API
   1. Write a line of informal documentation in the Javadoc
      for the class, explaining what an instance
      represents (in the case of immutable abstractions)
      or stores (in the case of mutable abstractions).
   2. Define the raw abstract state space.
      (= Declare the inspectors/getters)
   3. Define the space of valid abstract states.
      (= Write down the abstract state invariants, either as
      @invar clauses in the class's Javadoc (= the Javadoc preceding the class),
      or as @post clauses in the inspectors' Javadoc.
   4. Declaring and documenting the constructors and mutators
   
2. Implementing the abstraction
   1. Defining the representation
      1. Defining the raw concrete state space
         (= Defining the (private!) fields)
      2. Defining the space of valid concrete states
         (= writing down the representation invariants
            (= @invar clauses in the Javadoc for the fields))
      3. Defining the mapping of concrete states to
         abstract states
         (= implementing the inspectors)
      SANITY CHECKS:
      A. Inspectors don't crash on valid concrete states.
      B. Valid concrete states are mapped to valid
         abstract states.
   2. Implementing the constructors and mutators